from neuron import h
import neuron
import unittest
import sys
from multiprocessing import Process

scalar_bistable_data = { 'rxd':
[3.872370530242001e-24, 2.411674445771420e-23, 1.667524717451771e-22, 1.132417447670439e-21, 7.529718703964290e-21, 4.898967465170301e-20, 3.116791696748720e-19, 1.937757198340029e-18, 1.176457232990313e-17, 6.969795189692258e-17, 4.026215204000437e-16, 2.265980872424579e-15, 1.241449855817673e-14, 6.614978530891047e-14, 3.424892036247105e-13, 1.721300580748575e-12, 8.388969055992443e-12, 3.960326238871888e-11, 1.808962706725039e-10, 7.985233309114090e-10, 3.402246712257511e-09, 1.397346659025728e-08, 5.524898155955478e-08, 2.100068956631040e-07, 7.663580767216315e-07, 2.681147294349988e-06, 8.980870967217267e-06, 2.876598956565760e-05, 8.800766529129073e-05, 2.569546114751403e-04, 7.155453074420531e-04, 1.900114705915040e-03, 4.812413870557774e-03, 1.162830925958912e-02, 2.679651258898936e-02, 5.872244290331779e-02, 1.213108056018735e-01, 2.317413381137435e-01, 3.966426485443388e-01, 5.892391354864348e-01, 7.574768955082867e-01, 8.716329566248711e-01, 9.369158321116224e-01, 9.705726745841363e-01, 9.868369535006795e-01, 9.943370851362673e-01, 9.976575438970857e-01, 9.990688531868015e-01, 9.996416147715845e-01, 9.998563471217550e-01, 9.999103645028129e-01, 9.998563471217576e-01, 9.996416147715930e-01, 9.990688531868255e-01, 9.976575438971529e-01, 9.943370851364560e-01, 9.868369535011128e-01, 9.705726745849518e-01, 9.369158321121586e-01, 8.716329566240180e-01, 7.574768955014445e-01, 5.892391354874127e-01, 3.966426485508802e-01, 2.317413381218593e-01, 1.213108056097354e-01, 5.872244290603298e-02, 2.679651259011778e-02, 1.162830926016771e-02, 4.812413870726217e-03, 1.900114705980307e-03, 7.155453074667148e-04, 2.569546114837965e-04, 8.800766529393579e-05, 2.876598956639416e-05, 8.980870967402289e-06, 2.681147294391362e-06, 7.663580767294788e-07, 2.100068956641711e-07, 5.524898155955465e-08, 1.397346659018724e-08, 3.402246712223689e-09, 7.985233308996018e-10, 1.808962706689676e-10, 3.960326238776064e-11, 8.388969055751470e-12, 1.721300580691560e-12, 3.424892036119088e-13, 6.614978530616664e-14, 1.241449855761281e-14, 2.265980872313115e-15, 4.026215203787920e-16, 6.969795189300558e-17, 1.176457232920387e-17, 1.937757198218898e-18, 3.116791696544880e-19, 4.898967464836589e-20, 7.529718703432157e-21, 1.132417447587703e-21, 1.667524717326197e-22, 2.411674445584753e-23, 3.872370529933985e-24],
 'crxd' :
[4.666144368739553e-24, 2.888704007378294e-23, 1.986504953195841e-22, 1.341708879755938e-21, 8.872570814175589e-21, 5.740880124662921e-20, 3.632196361482038e-19, 2.245604121004388e-18, 1.355711505202327e-17, 7.986451339137754e-17, 4.587323676899676e-16, 2.567045965818926e-15, 1.398326895049450e-14, 7.407949505967670e-14, 3.813250931917600e-13, 1.905347304599457e-12, 9.231798364410461e-12, 4.332732659668245e-11, 1.967471956902693e-10, 8.633990304666386e-10, 3.657079221471421e-09, 1.493207056713948e-08, 5.869401066025243e-08, 2.218029569259474e-07, 8.047212799629250e-07, 2.799213829568570e-06, 9.323183477925731e-06, 2.969562407156739e-05, 9.035408030381566e-05, 2.623954841897339e-04, 7.269141545185255e-04, 1.920726909911178e-03, 4.841879243431064e-03, 1.164965343224173e-02, 2.674863273052559e-02, 5.846777500048252e-02, 1.206799453008834e-01, 2.308459675650935e-01, 3.962758789592548e-01, 5.900229199039158e-01, 7.586218889022415e-01, 8.722981880510015e-01, 9.370823930114011e-01, 9.705058492437171e-01, 9.867204567968444e-01, 9.942426940783661e-01, 9.975977799681778e-01, 9.990359504416327e-01, 9.996249801006252e-01, 9.998477834074035e-01, 9.999041758657206e-01, 9.998477834074035e-01, 9.996249801006252e-01, 9.990359504416326e-01, 9.975977799681777e-01, 9.942426940783655e-01, 9.867204567968437e-01, 9.705058492437160e-01, 9.370823930113995e-01, 8.722981880509845e-01, 7.586218889021992e-01, 5.900229199038706e-01, 3.962758789592359e-01, 2.308459675650852e-01, 1.206799453008814e-01, 5.846777500048142e-02, 2.674863273052497e-02, 1.164965343224158e-02, 4.841879243431020e-03, 1.920726909911166e-03, 7.269141545185224e-04, 2.623954841897313e-04, 9.035408030381501e-05, 2.969562407156726e-05, 9.323183477925702e-06, 2.799213829568569e-06, 8.047212799629269e-07, 2.218029569259469e-07, 5.869401066025247e-08, 1.493207056713951e-08, 3.657079221471437e-09, 8.633990304666446e-10, 1.967471956902691e-10, 4.332732659668252e-11, 9.231798364410503e-12, 1.905347304599471e-12, 3.813250931917631e-13, 7.407949505967741e-14, 1.398326895049453e-14, 2.567045965818940e-15, 4.587323676899705e-16, 7.986451339137816e-17, 1.355711505202341e-17, 2.245604121004394e-18, 3.632196361482056e-19, 5.740880124662959e-20, 8.872570814175665e-21, 1.341708879755951e-21, 1.986504953195844e-22, 2.888704007378305e-23, 4.666144368739581e-24]
}

class RxDTestCase(unittest.TestCase):
    """Tests of rxd"""

    def scalar_bistable(self, rxdstr):
        if rxdstr == 'rxd':
            from neuron import rxd
        else:
            from neuron import crxd as rxd
        h.load_file('stdrun.hoc')
        s = h.Section(name='s')
        s.nseg = 101
        cyt = rxd.Region(h.allsec())
        c = rxd.Species(cyt, name='c', initial=lambda node: 1 if 0.4 < node.x < 0.6 else 0, d=1)
        r = rxd.Rate(c, -c * (1-c)*(0.3-c))
        h.finitialize()
        h.run()

        #check the results
        result = h.Vector(c.nodes.concentration)
        cmpV = h.Vector(scalar_bistable_data[rxdstr])
        cmpV.sub(result)
        cmpV.abs()
        if cmpV.sum() < 1e-6:
            sys.exit(0) 
        sys.exit(-1)
    
    def test_crxd(self):
        p = Process(target=self.scalar_bistable, args=('crxd',))
        p.start()
        p.join()
        assert(p.exitcode == 0)
        return 0 
        

    def test_rxd(self):
        p = Process(target=self.scalar_bistable, args=('rxd',))
        p.start()
        p.join()
        assert(p.exitcode == 0)
        return 0 



def suite():
    suite = unittest.makeSuite(RxDTestCase,'test')
    return suite
    
def test():
    runner = unittest.TextTestRunner(verbosity=2)
    runner.run(suite())

if __name__ == "__main__":
    # unittest.main()
    test()
